name: Post News

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  post_news:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üèóÔ∏è Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: üì¶ Install Dependencies
        run: pip install -r requirements.txt

      - name: üîë Set Up Environment Variables
        env:
          NEWS_USERNAME: ${{ secrets.NEWS_USERNAME }}
          NEWS_PASSWORD: ${{ secrets.NEWS_PASSWORD }}
          APIKEY: ${{ secrets.APIKEY }}
        run: |
          echo "NEWS_USERNAME=$NEWS_USERNAME" >> .env
          echo "NEWS_PASSWORD=$NEWS_PASSWORD" >> .env
          echo "APIKEY=$APIKEY" >> .env

      - name: üöÄ Run News Posting Script
        env:
          NEWS_USERNAME: ${{ secrets.NEWS_USERNAME }}
          NEWS_PASSWORD: ${{ secrets.NEWS_PASSWORD }}
          APIKEY: ${{ secrets.APIKEY }}
        run: python news/reel_news.py

      - name: üóëÔ∏è Delete Old Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releases=$(gh release list --json tagName --jq '.[].tagName')
          for tag in $releases; do
            echo "Deleting release: $tag"
            gh release delete $tag --yes
            gh api -X DELETE repos/${{ github.repository }}/git/refs/tags/$tag
          done
        continue-on-error: true  # Prevent failures if no releases exist

      - name: üè∑Ô∏è Create a Version Tag
        run: |
          TAG="v$(date +%Y%m%d%H%M%S)"  # Auto-generate versioned tag
          echo "TAG=$TAG" >> $GITHUB_ENV
          git tag $TAG
          git push origin $TAG

      - name: üì§ Upload Reels to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: "news/output/reels/*.mp4"  # Upload all MP4 files
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.TAG }}
          name: "Reels Release ${{ env.TAG }}"
          body: "Auto-uploaded MP4 reels from 'news/output/reels/' üé•"
          draft: false
          prerelease: false

      - name: üìù Generate Download Links File
        run: |
          DOWNLOAD_FILE="news/output/download_links.txt"
          echo "Download links for the latest reels:" > $DOWNLOAD_FILE
          for file in news/output/reels/*.mp4; do
            filename=$(basename "$file")
            echo "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/$filename" >> $DOWNLOAD_FILE
          done
        shell: bash

      - name: üè∑Ô∏è Commit and Push the File
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add news/output/download_links.txt
          git commit -m "Add generated download links"
          git push origin main  # Change `main` to your actual branch

      - name: üì§ Upload `download_links.txt` to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: "news/output/download_links.txt"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.TAG }}